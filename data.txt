About Data:
- **Source**: UCI Household Power Consumption Dataset
- **Time Period**: December 2006 - November 2010 (47 months)
- **Frequency**: Minute-level readings
- **Rows**: 2,075,259
- **Columns**: 10

### 2. Power vs Energy: Critical Distinction
| **Term** | **Unit** | **What It Represents** | **In This Dataset** |
|----------|----------|------------------------|---------------------|
| **Power** | kW (kilowatts) | Rate of energy use at a moment | `Global_active_power` |
| **Energy** | kWh (kilowatt-hours) | Total consumption over time | Calculated from power |

### 3. Key Variables Explained
| **Column** | **Unit** | **Description** | **Conversion to Energy** |
|------------|----------|-----------------|--------------------------|
| `Global_active_power` | kW | Total power consumed by household | `kWh = kW × (1/60) hours` (per minute) |
| `Sub_metering_1` | Wh | Kitchen appliances (dishwasher, oven, microwave) | `kWh = Wh/1000` |
| `Sub_metering_2` | Wh | Laundry room (washer, dryer, fridge) | `kWh = Wh/1000` |
| `Sub_metering_3` | Wh | HVAC (water heater + AC) | `kWh = Wh/1000` |
| `Voltage` | Volts | Electrical potential | Not directly used in consumption |

### 4. The Missing Piece: "Other" Consumption
**Total Household Energy** =  
`Sub1 + Sub2 + Sub3 + Other`

Where **"Other"** includes:
- Lighting
- Electronics (TVs, computers)
- Chargers
- Unmonitored appliances

Calculated as:  
`Other = (Global_active_power × 1000 × 1/60) - (Sub1 + Sub2 + Sub3)`

### 5. Core Problems We Can Solve
#### A. Exploratory Analysis (EDA)
- **Pattern Identification**:
  - Daily/seasonal consumption rhythms
  - Peak demand hours
  - Appliance-specific usage patterns
- **Energy Breakdown**:
  ```python
  total_energy = df.Global_active_power.sum() * (1/60) / 1000  # kWh
  sub1_energy = df.Sub_metering_1.sum() / 1000
  sub2_energy = df.Sub_metering_2.sum() / 1000
  sub3_energy = df.Sub_metering_3.sum() / 1000
  other_energy = total_energy - (sub1 + sub2 + sub3)
  ```

#### B. Forecasting Problems
1. **Short-Term Load Forecasting**:
   - Predict next 24 hours of `Global_active_power`
   - Inputs: Historical power + weather + time features

2. **Appliance-Specific Forecasting**:
   - Predict HVAC usage (`Sub_metering_3`) based on temperature

3. **Anomaly Detection**:
   - Identify abnormal consumption patterns
   - Example: Unexpected overnight usage spikes

#### C. Optimization Problems
- **Peak Shaving**: Reduce consumption during expensive peak hours
- **Load Shifting**: Schedule high-consumption appliances to off-peak times
- **Efficiency Recommendations**: Identify wasteful consumption patterns

### 6. Solution Approach
    A[Raw Data] --> B[Preprocessing]
    B --> C[Feature Engineering]
    C --> D[EDA & Insights]
    D --> E[Forecast Models]
    E --> F[Optimization]
```

### 7. Practical Implementation Roadmap

#### Step 1: Data Preparation
# Load and preprocess
df = pd.read_csv('household_power_consumption.txt', sep=';', 
                 parse_dates={'datetime': ['Date', 'Time']}, 
                 na_values=['?'])

# Calculate energy in kWh per minute
df['total_energy_kWh'] = df['Global_active_power'] * (1/60) / 1000
df['sub1_kWh'] = df['Sub_metering_1'] / 1000
df['sub2_kWh'] = df['Sub_metering_2'] / 1000
df['sub3_kWh'] = df['Sub_metering_3'] / 1000
df['other_kWh'] = df['total_energy_kWh'] - (df['sub1_kWh'] + df['sub2_kWh'] + df['sub3_kWh'])
```

#### Step 2: Time-Based Aggregation
# Resample to daily energy
daily = df.resample('D', on='datetime').sum()
daily['avg_temp'] = ...  # Add temperature data

# Visualize components
import matplotlib.pyplot as plt
daily[['sub1_kWh','sub2_kWh','sub3_kWh','other_kWh']].plot.area(
    title='Daily Energy Consumption Breakdown')
plt.ylabel('kWh')
```

#### Step 3: Key Questions to Answer
1. "What percentage of energy is used by HVAC vs other appliances?"
2. "How does temperature affect HVAC usage?"
3. "What are the peak consumption hours on weekdays vs weekends?"
4. "Is overall energy consumption increasing year-over-year?"

#### Step 4: Forecasting Model Structure
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

# Features: Time + Weather + History
features = ['dayofweek', 'month', 'temp', 'lag_24h']
target = 'Global_active_power'

model = RandomForestRegressor()
model.fit(X_train[features], y_train)
```